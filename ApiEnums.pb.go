// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: ApiEnums.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountDataType int32

const (
	AccountDataType_AccountData         AccountDataType = 0
	AccountDataType_AccountPositionData AccountDataType = 1
	AccountDataType_Reset               AccountDataType = 2
	AccountDataType_AccountExposure     AccountDataType = 3
)

// Enum value maps for AccountDataType.
var (
	AccountDataType_name = map[int32]string{
		0: "AccountData",
		1: "AccountPositionData",
		2: "Reset",
		3: "AccountExposure",
	}
	AccountDataType_value = map[string]int32{
		"AccountData":         0,
		"AccountPositionData": 1,
		"Reset":               2,
		"AccountExposure":     3,
	}
)

func (x AccountDataType) Enum() *AccountDataType {
	p := new(AccountDataType)
	*p = x
	return p
}

func (x AccountDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_ApiEnums_proto_enumTypes[0].Descriptor()
}

func (AccountDataType) Type() protoreflect.EnumType {
	return &file_ApiEnums_proto_enumTypes[0]
}

func (x AccountDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountDataType.Descriptor instead.
func (AccountDataType) EnumDescriptor() ([]byte, []int) {
	return file_ApiEnums_proto_rawDescGZIP(), []int{0}
}

type ConfigObjectType int32

const (
	ConfigObjectType_Connector                      ConfigObjectType = 0
	ConfigObjectType_ConnectorAccount               ConfigObjectType = 1
	ConfigObjectType_ConnectorAccountSymbol         ConfigObjectType = 3
	ConfigObjectType_ConnectorStream                ConfigObjectType = 4
	ConfigObjectType_ConnectorStreamSymbol          ConfigObjectType = 6
	ConfigObjectType_ConnectorConfigSetting         ConfigObjectType = 7
	ConfigObjectType_Pool                           ConfigObjectType = 8
	ConfigObjectType_PoolSymbol                     ConfigObjectType = 10
	ConfigObjectType_Profile                        ConfigObjectType = 11
	ConfigObjectType_ProfileSymbol                  ConfigObjectType = 13
	ConfigObjectType_Provider                       ConfigObjectType = 14
	ConfigObjectType_ProviderConfigSetting          ConfigObjectType = 17
	ConfigObjectType_Security                       ConfigObjectType = 18
	ConfigObjectType_Symbol                         ConfigObjectType = 19
	ConfigObjectType_AccountSettings                ConfigObjectType = 20
	ConfigObjectType_ProfileLeverageCurrency        ConfigObjectType = 21
	ConfigObjectType_ProfileLeverageCurrencySetting ConfigObjectType = 22
	ConfigObjectType_ProfileLimitCurrency           ConfigObjectType = 23
	ConfigObjectType_ProfileLimitCurrencySetting    ConfigObjectType = 24
	ConfigObjectType_ProfileLimitSymbol             ConfigObjectType = 25
	ConfigObjectType_ProfileLimitSymbolSetting      ConfigObjectType = 26
	ConfigObjectType_ProfileSettlement              ConfigObjectType = 27
	ConfigObjectType_ProfileSettlementSetting       ConfigObjectType = 28
	ConfigObjectType_ProfileSwap                    ConfigObjectType = 29
	ConfigObjectType_ProfileSwapSetting             ConfigObjectType = 30
	ConfigObjectType_CommissionConnector            ConfigObjectType = 31
	ConfigObjectType_CommissionProfile              ConfigObjectType = 32
	ConfigObjectType_CommissionProfileSetting       ConfigObjectType = 33
	ConfigObjectType_Filter                         ConfigObjectType = 34
	ConfigObjectType_Giveup                         ConfigObjectType = 35
	ConfigObjectType_DealerLink                     ConfigObjectType = 36
	ConfigObjectType_DealerTrade                    ConfigObjectType = 37
	ConfigObjectType_DealerValuedate                ConfigObjectType = 38
	ConfigObjectType_ConnectorConfig                ConfigObjectType = 39
	ConfigObjectType_ProviderConfig                 ConfigObjectType = 40
	ConfigObjectType_SystemInfo                     ConfigObjectType = 41
	ConfigObjectType_ProviderScaling                ConfigObjectType = 42
	ConfigObjectType_ProfileLeverageSymbol          ConfigObjectType = 43
	ConfigObjectType_ProfileLeverageSymbolSetting   ConfigObjectType = 44
	ConfigObjectType_ConnectorConfigState           ConfigObjectType = 45
	ConfigObjectType_ProviderConfigState            ConfigObjectType = 46
	ConfigObjectType_XCoreCurrency                  ConfigObjectType = 48
	ConfigObjectType_ProfilePl                      ConfigObjectType = 49
	ConfigObjectType_ProfilePlSetting               ConfigObjectType = 50
	ConfigObjectType_ProfileDividend                ConfigObjectType = 51
	ConfigObjectType_ProfileDividendSetting         ConfigObjectType = 52
	ConfigObjectType_AccountGroup                   ConfigObjectType = 53
	ConfigObjectType_AccountGroupSetting            ConfigObjectType = 54
	ConfigObjectType_DealerValuedateHoliday         ConfigObjectType = 55
	ConfigObjectType_AccountProfileWallet           ConfigObjectType = 56
	ConfigObjectType_AccountProfileWalletSetting    ConfigObjectType = 57
	ConfigObjectType_ProviderTrade                  ConfigObjectType = 58
	ConfigObjectType_ProviderTradeSetting           ConfigObjectType = 59
	ConfigObjectType_ProviderStream                 ConfigObjectType = 60
	ConfigObjectType_ProviderStreamSetting          ConfigObjectType = 61
	ConfigObjectType_ConnectorRouteAdd              ConfigObjectType = 62
	ConfigObjectType_ConnectorRouteUpdate           ConfigObjectType = 63
	ConfigObjectType_ConnectorRouteDelete           ConfigObjectType = 64
	ConfigObjectType_ConnectorProfileXHedge         ConfigObjectType = 65
	ConfigObjectType_ConnectorProfileXHedgeSetting  ConfigObjectType = 66
)

// Enum value maps for ConfigObjectType.
var (
	ConfigObjectType_name = map[int32]string{
		0:  "Connector",
		1:  "ConnectorAccount",
		3:  "ConnectorAccountSymbol",
		4:  "ConnectorStream",
		6:  "ConnectorStreamSymbol",
		7:  "ConnectorConfigSetting",
		8:  "Pool",
		10: "PoolSymbol",
		11: "Profile",
		13: "ProfileSymbol",
		14: "Provider",
		17: "ProviderConfigSetting",
		18: "Security",
		19: "Symbol",
		20: "AccountSettings",
		21: "ProfileLeverageCurrency",
		22: "ProfileLeverageCurrencySetting",
		23: "ProfileLimitCurrency",
		24: "ProfileLimitCurrencySetting",
		25: "ProfileLimitSymbol",
		26: "ProfileLimitSymbolSetting",
		27: "ProfileSettlement",
		28: "ProfileSettlementSetting",
		29: "ProfileSwap",
		30: "ProfileSwapSetting",
		31: "CommissionConnector",
		32: "CommissionProfile",
		33: "CommissionProfileSetting",
		34: "Filter",
		35: "Giveup",
		36: "DealerLink",
		37: "DealerTrade",
		38: "DealerValuedate",
		39: "ConnectorConfig",
		40: "ProviderConfig",
		41: "SystemInfo",
		42: "ProviderScaling",
		43: "ProfileLeverageSymbol",
		44: "ProfileLeverageSymbolSetting",
		45: "ConnectorConfigState",
		46: "ProviderConfigState",
		48: "XCoreCurrency",
		49: "ProfilePl",
		50: "ProfilePlSetting",
		51: "ProfileDividend",
		52: "ProfileDividendSetting",
		53: "AccountGroup",
		54: "AccountGroupSetting",
		55: "DealerValuedateHoliday",
		56: "AccountProfileWallet",
		57: "AccountProfileWalletSetting",
		58: "ProviderTrade",
		59: "ProviderTradeSetting",
		60: "ProviderStream",
		61: "ProviderStreamSetting",
		62: "ConnectorRouteAdd",
		63: "ConnectorRouteUpdate",
		64: "ConnectorRouteDelete",
		65: "ConnectorProfileXHedge",
		66: "ConnectorProfileXHedgeSetting",
	}
	ConfigObjectType_value = map[string]int32{
		"Connector":                      0,
		"ConnectorAccount":               1,
		"ConnectorAccountSymbol":         3,
		"ConnectorStream":                4,
		"ConnectorStreamSymbol":          6,
		"ConnectorConfigSetting":         7,
		"Pool":                           8,
		"PoolSymbol":                     10,
		"Profile":                        11,
		"ProfileSymbol":                  13,
		"Provider":                       14,
		"ProviderConfigSetting":          17,
		"Security":                       18,
		"Symbol":                         19,
		"AccountSettings":                20,
		"ProfileLeverageCurrency":        21,
		"ProfileLeverageCurrencySetting": 22,
		"ProfileLimitCurrency":           23,
		"ProfileLimitCurrencySetting":    24,
		"ProfileLimitSymbol":             25,
		"ProfileLimitSymbolSetting":      26,
		"ProfileSettlement":              27,
		"ProfileSettlementSetting":       28,
		"ProfileSwap":                    29,
		"ProfileSwapSetting":             30,
		"CommissionConnector":            31,
		"CommissionProfile":              32,
		"CommissionProfileSetting":       33,
		"Filter":                         34,
		"Giveup":                         35,
		"DealerLink":                     36,
		"DealerTrade":                    37,
		"DealerValuedate":                38,
		"ConnectorConfig":                39,
		"ProviderConfig":                 40,
		"SystemInfo":                     41,
		"ProviderScaling":                42,
		"ProfileLeverageSymbol":          43,
		"ProfileLeverageSymbolSetting":   44,
		"ConnectorConfigState":           45,
		"ProviderConfigState":            46,
		"XCoreCurrency":                  48,
		"ProfilePl":                      49,
		"ProfilePlSetting":               50,
		"ProfileDividend":                51,
		"ProfileDividendSetting":         52,
		"AccountGroup":                   53,
		"AccountGroupSetting":            54,
		"DealerValuedateHoliday":         55,
		"AccountProfileWallet":           56,
		"AccountProfileWalletSetting":    57,
		"ProviderTrade":                  58,
		"ProviderTradeSetting":           59,
		"ProviderStream":                 60,
		"ProviderStreamSetting":          61,
		"ConnectorRouteAdd":              62,
		"ConnectorRouteUpdate":           63,
		"ConnectorRouteDelete":           64,
		"ConnectorProfileXHedge":         65,
		"ConnectorProfileXHedgeSetting":  66,
	}
)

func (x ConfigObjectType) Enum() *ConfigObjectType {
	p := new(ConfigObjectType)
	*p = x
	return p
}

func (x ConfigObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_ApiEnums_proto_enumTypes[1].Descriptor()
}

func (ConfigObjectType) Type() protoreflect.EnumType {
	return &file_ApiEnums_proto_enumTypes[1]
}

func (x ConfigObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigObjectType.Descriptor instead.
func (ConfigObjectType) EnumDescriptor() ([]byte, []int) {
	return file_ApiEnums_proto_rawDescGZIP(), []int{1}
}

type ConfigReferenceType int32

const (
	ConfigReferenceType_PoolExecMode         ConfigReferenceType = 0
	ConfigReferenceType_ProfileSpread        ConfigReferenceType = 1
	ConfigReferenceType_ConnectorAccountMode ConfigReferenceType = 2
	ConfigReferenceType_ConnectorStreamMode  ConfigReferenceType = 3
	ConfigReferenceType_ConnectorType        ConfigReferenceType = 4
	ConfigReferenceType_Currency             ConfigReferenceType = 5
	ConfigReferenceType_LqSource             ConfigReferenceType = 6
	ConfigReferenceType_SecurityType         ConfigReferenceType = 7
	ConfigReferenceType_ProviderType         ConfigReferenceType = 8
)

// Enum value maps for ConfigReferenceType.
var (
	ConfigReferenceType_name = map[int32]string{
		0: "PoolExecMode",
		1: "ProfileSpread",
		2: "ConnectorAccountMode",
		3: "ConnectorStreamMode",
		4: "ConnectorType",
		5: "Currency",
		6: "LqSource",
		7: "SecurityType",
		8: "ProviderType",
	}
	ConfigReferenceType_value = map[string]int32{
		"PoolExecMode":         0,
		"ProfileSpread":        1,
		"ConnectorAccountMode": 2,
		"ConnectorStreamMode":  3,
		"ConnectorType":        4,
		"Currency":             5,
		"LqSource":             6,
		"SecurityType":         7,
		"ProviderType":         8,
	}
)

func (x ConfigReferenceType) Enum() *ConfigReferenceType {
	p := new(ConfigReferenceType)
	*p = x
	return p
}

func (x ConfigReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ApiEnums_proto_enumTypes[2].Descriptor()
}

func (ConfigReferenceType) Type() protoreflect.EnumType {
	return &file_ApiEnums_proto_enumTypes[2]
}

func (x ConfigReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigReferenceType.Descriptor instead.
func (ConfigReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_ApiEnums_proto_rawDescGZIP(), []int{2}
}

type ErrorType int32

const (
	ErrorType_GeneralError         ErrorType = 0
	ErrorType_SessionNotFound      ErrorType = 1
	ErrorType_UnknownMessage       ErrorType = 2
	ErrorType_SerializationFailure ErrorType = 3
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "GeneralError",
		1: "SessionNotFound",
		2: "UnknownMessage",
		3: "SerializationFailure",
	}
	ErrorType_value = map[string]int32{
		"GeneralError":         0,
		"SessionNotFound":      1,
		"UnknownMessage":       2,
		"SerializationFailure": 3,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_ApiEnums_proto_enumTypes[3].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_ApiEnums_proto_enumTypes[3]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_ApiEnums_proto_rawDescGZIP(), []int{3}
}

type PositionAdjustmentMode int32

const (
	PositionAdjustmentMode_Maker    PositionAdjustmentMode = 0
	PositionAdjustmentMode_Taker    PositionAdjustmentMode = 1
	PositionAdjustmentMode_Broker   PositionAdjustmentMode = 2
	PositionAdjustmentMode_External PositionAdjustmentMode = 3
)

// Enum value maps for PositionAdjustmentMode.
var (
	PositionAdjustmentMode_name = map[int32]string{
		0: "Maker",
		1: "Taker",
		2: "Broker",
		3: "External",
	}
	PositionAdjustmentMode_value = map[string]int32{
		"Maker":    0,
		"Taker":    1,
		"Broker":   2,
		"External": 3,
	}
)

func (x PositionAdjustmentMode) Enum() *PositionAdjustmentMode {
	p := new(PositionAdjustmentMode)
	*p = x
	return p
}

func (x PositionAdjustmentMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionAdjustmentMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ApiEnums_proto_enumTypes[4].Descriptor()
}

func (PositionAdjustmentMode) Type() protoreflect.EnumType {
	return &file_ApiEnums_proto_enumTypes[4]
}

func (x PositionAdjustmentMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionAdjustmentMode.Descriptor instead.
func (PositionAdjustmentMode) EnumDescriptor() ([]byte, []int) {
	return file_ApiEnums_proto_rawDescGZIP(), []int{4}
}

var File_ApiEnums_proto protoreflect.FileDescriptor

var file_ApiEnums_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x50, 0x78, 0x6d, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2a, 0x5b, 0x0a, 0x0f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x10, 0x03, 0x2a, 0xed, 0x0a, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x10, 0x06, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f,
	0x6f, 0x6c, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10,
	0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x11, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x16, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x10, 0x19,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x1a, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x77, 0x61, 0x70, 0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x1e, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x20, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x21, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x69, 0x76, 0x65, 0x75,
	0x70, 0x10, 0x23, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x10, 0x25, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x27, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x10, 0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x2a, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x10, 0x2b, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x2c, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x2d, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x2e, 0x12, 0x11, 0x0a, 0x0d, 0x58, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x30, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x10, 0x31, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x32, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x34,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x44,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x10, 0x37, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x10,
	0x38, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x39, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x10, 0x3a, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x3b, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x3d, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x10, 0x3e, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x3f, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x40, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x58, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x10, 0x41, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x58, 0x48, 0x65, 0x64, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x42, 0x2a, 0xc0, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x71, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x2a, 0x60, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x03, 0x2a, 0x48, 0x0a,
	0x16, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x03, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ApiEnums_proto_rawDescOnce sync.Once
	file_ApiEnums_proto_rawDescData = file_ApiEnums_proto_rawDesc
)

func file_ApiEnums_proto_rawDescGZIP() []byte {
	file_ApiEnums_proto_rawDescOnce.Do(func() {
		file_ApiEnums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ApiEnums_proto_rawDescData)
	})
	return file_ApiEnums_proto_rawDescData
}

var file_ApiEnums_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ApiEnums_proto_goTypes = []interface{}{
	(AccountDataType)(0),        // 0: Pxm.Enums.AccountDataType
	(ConfigObjectType)(0),       // 1: Pxm.Enums.ConfigObjectType
	(ConfigReferenceType)(0),    // 2: Pxm.Enums.ConfigReferenceType
	(ErrorType)(0),              // 3: Pxm.Enums.ErrorType
	(PositionAdjustmentMode)(0), // 4: Pxm.Enums.PositionAdjustmentMode
}
var file_ApiEnums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ApiEnums_proto_init() }
func file_ApiEnums_proto_init() {
	if File_ApiEnums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ApiEnums_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ApiEnums_proto_goTypes,
		DependencyIndexes: file_ApiEnums_proto_depIdxs,
		EnumInfos:         file_ApiEnums_proto_enumTypes,
	}.Build()
	File_ApiEnums_proto = out.File
	file_ApiEnums_proto_rawDesc = nil
	file_ApiEnums_proto_goTypes = nil
	file_ApiEnums_proto_depIdxs = nil
}
